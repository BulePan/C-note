1、基本解释：
	extern可以置于变量或者函数前（此处的变量或函数为声明），以标识变量或者函数定义在别的文件中，提示编译器在当前文件中遇到此变量或函数时在其他模块中查找其定义；也可用来指示链接时采用c语言方式链接（extern "C" {}）。即extern有两个作用：
	作用一：声明变量或者函数时，变量后者函数的定义在A模块，而需要在B模块中使用该变量或者函数，此时采用extern在B模块中声明。在编译时B模块虽然找不到该变量或者函数的定义，但是并不会报错，直到链接时才从A模块中找到该变量或者函数，且A模块中不能将变量声明为局部变量或者局部函数，即该变量或者函数必须为全局变量或者函数。
	作用二：extern与"C"一起使用，如：extern "C" void fun(void);则告诉编译器在编译fun这个函数时按照C的规则去处理函数名而不是C++，由于C++函数重载的原因，C++会将函数名特殊处理，因此如果在C代码中按照C++的函数名去处理将不能编译通过。
2、问题：extern 变量
	在源文件里定义数组char a[6];在其他文件里使用extern char *a;声明将会出错。
	分析：程序在运行时会告诉你非法访问。原因在于，指向类型T的指针并不等于类型T的数组。extern char *a声明的是指针变量而不是字符数组，因此与实际的定义不同，造成运行时非法访问，该声明应改成：extern char a[];
