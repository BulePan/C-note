	多态性是指相同对象收到不同消息或不同、对象收到相同消息时产生不同的实现动作。
	多态性可以简单概括为“一个接口，多种方法”，程序在运行时才决定调用的函数，它是面向对象编程领域的核心概念。
	C++支持两种多态性：编译时多态性（通过重载函数实现），运行时多态性（虚函数实现）。
	C++运行时多态性是通过虚函数来实现的，虚函数允许子类重新定义成员函数，而子类重新定义父类的做法成为覆盖，或者称为重写（重写有两种，直接重写成员函数与重写虚函数，只有重写了虚函数才能算作是体现了C++多态性）。而重载则是允许有多个同名函数，而这些韩式的参数列表不同，参数个数不同，参数类型不同，或者两者都不同。编译器会根据这些函数的不同列表，将同名函数的名称做修饰，从而生成一些不同名称的与处理函数，来实现同名函数调用时的重载问题，但是这并没有体现多态特性。
	C++多态与非多态的实质区别就是函数地址的早绑定还是晚绑定，如果函数地调用在编译期间就可以确定函数的调用地址，并且生产代码，是静态的，也就是说地址是早绑定的。如果函数调用的地址不能在编译期间确定，需要在运行时才确定，这就属于晚绑定。
	多态的作用，封装可以使得代码模块化，继承可以扩展已存在代码，它们的目的都是为了代码重用。而多态的目的则是为了借口重用。也就是说不论传递过来的究竟是哪个类的对象，函数都能通过同一个接口调用到适应各自对象的实现方法。

笔试题目：
#include<iostream>
using namespace std;
class A
{
public:
	void foo()
	{
		printf("1\n");
	}
	virtual void fun()
	{
		printf("2\n");
	}
};
class B : public A
{
public:
	void foo()
	{
		printf("3\n");
	}
	void fun()
	{
		printf("4\n");
	}
};
int main(void)
{
	A a;
	B b;
	A *p = &a;   //本身是基类指针，指向也是基类对象，调用的都是基类本身的函数，因此下面两行输出1、 2。
	p->foo();
	p->fun();
	p = &b;      //本身是基类指针，指向的是子类对象，正式体现多态的用法。
	p->foo();    //由于指针是基类指针，指向的一个固定偏移量的函数，因此此时指向的就只能是基类的成员函数，所以输出1.
	p->fun();    //fun是一个虚函数，由于每个虚函数都有一个虚函数列表，此时p调用fun()并不是直接调用的函数，
		     //而是通过虚函数表找到相应的函数地址，因此根据指向的对象不同，函数的地址也将会不同，
		     //这里将找到对应子类的fun()函数地址，所以输出4
	B *ptr = (B *)&a; 
	ptr->foo();  //由于B类是子类指针，虽然被赋予了基类对象的地址，但是在调用foo()时，
		     //地址偏移量固定，偏移量是子类对象的偏移量，于是即使在指向了基类对象的情况下，还是调用了子类的函数
	ptr->fun();  //因为多态的原因，由于指向的是一个基类对象，通过虚函数列表的引用，找到了基类中fun()函数的地址，因此调用了基类函数。
	return 0;
}

注：1、有virtual才可能发生多态现象。
    2、不发生多态(无virtual)调用就按照原类型调用。


#include<iostream>
using namespace std;
class Base
{
public:
	virtual void f(float x)
	{
		cout<<"Base::f(float)"<< x <<endl;
	}
	void g(float x)
	{
		cout<<"Base::g(float)"<< x <<endl;
	}
	void h(float x)
	{
		cout<<"Base::h(float)"<< x <<endl;
	}
};
class Derived : public Base
{
public:
	virtual void f(float x)
	{
		cout<<"Derived::f(float)"<< x <<endl;   //多态、覆盖
	}
	void g(int x)
	{
		cout<<"Derived::g(int)"<< x <<endl;     //隐藏
	}
	void h(float x)
	{
		cout<<"Derived::h(float)"<< x <<endl;   //隐藏
	}
};
int main(void)
{
	Derived d;
	Base *pb = &d;
	Derived *pd = &d;
	// Good : behavior depends solely on type of the object
	pb->f(3.14f);   // Derived::f(float) 3.14
	pd->f(3.14f);   // Derived::f(float) 3.14

	// Bad : behavior depends on type of the pointer
	pb->g(3.14f);   // Base::g(float)  3.14
	pd->g(3.14f);   // Derived::g(int) 3 

	// Bad : behavior depends on type of the pointer
	pb->h(3.14f);   // Base::h(float) 3.14
	pd->h(3.14f);   // Derived::h(float) 3.14
	return 0;
}

隐藏：指派生类的函数屏蔽了其同名的基类函数。
隐藏规则：
  (1)如果派生类的函数与基类的函数同名，但是参数不同，此时不论有无virtual关键字，基类的函数都将被隐藏（注意别与重载混淆）。
  (2)如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字，此时基类函数被隐藏（注意别与覆盖混淆）。

C++纯虚函数：纯虚函数是在基类声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加"= 0"，如：virtual void funtion() = 0;
纯虚函数的引入原因：
  1、为了方便使用多态特性，常需要在基类中定义虚函数。
  2、在很多情况下，基类本身生成的对象是不合情理的。例如，动物作为基类可以派生出老虎、孔雀等子类，但动物本身生成的对象明显不合常理。

为了解决上述问题，引入纯虚函数，要求在派生类中必须重写以实现多态性，同时含有存续函数的类称为抽象类，它不能生成对象。
